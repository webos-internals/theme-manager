#!/bin/sh

#
# These are expected to be set at packaging time
#

APP_DIR=/media/internal/.themes/.current

PATCH_NAME=theme.patch

TWEAKS_NAME=

BSPATCH_FILE=

FILES_DIR=files

PACKAGES_FILE=packages

#
# Here starts the part where all the magic happens
#

VERSION=aupt-5

IPKG_INFO_DIR=/usr/lib/ipkg/info

if [ -z "${IPKG_OFFLINE_ROOT}" ]; then
  IPKG_OFFLINE_ROOT=/media/cryptofs/apps
fi

#APP_DIR=${IPKG_OFFLINE_ROOT}${APP_DIR#${IPKG_OFFLINE_ROOT}}

PATCH_LOG_FILE=/media/internal/webos-themes.log
PATCH_CONTROL_DIR=/var/usr/lib/.webosinternals.patches
PATCH_PACKAGES_LIST=/media/internal/.webosinternals.patches.packages

TWEAKS_PREFERENCES_DIR=/media/cryptofs/apps/usr/palm/services/org.webosinternals.tweaks.prefs/preferences

#
# Required applications and their full execute paths
#

PATCH_EXEC=/var/usr/bin/patch
LSDIFF_EXEC=/var/usr/bin/lsdiff
BSPATCH_EXEC=/usr/bin/bspatch

if [ -f /media/cryptofs/apps/usr/bin/patch ]; then
  PATCH_EXEC=/media/cryptofs/apps/usr/bin/patch
fi

if [ -f /media/cryptofs/apps/usr/bin/lsdiff ]; then
  LSDIFF_EXEC=/media/cryptofs/apps/usr/bin/lsdiff
fi

if [ ! -z "${BSPATCH_FILE}" ]; then
  BSPATCH_NAME=`basename ${BSPATCH_FILE}`.bspatch
fi

#
# Helper functions that do all the needed heavy work
#

do_install_failure() {
  echo | tee -a ${PATCH_LOG_FILE}
  echo "*** FAILED ***" | tee -a ${PATCH_LOG_FILE}
  echo | tee -a ${PATCH_LOG_FILE}

  rm -f /var/webosinternals.cache >/dev/null 2>&1

  mount -o ro,remount / | tee -a ${PATCH_LOG_FILE} 1>&2

  exit 1
}

do_install_success() {
  echo | tee -a ${PATCH_LOG_FILE}
  echo "*** SUCCESS ***" | tee -a ${PATCH_LOG_FILE}
  echo | tee -a ${PATCH_LOG_FILE}

  rm -f /var/webosinternals.cache >/dev/null 2>&1

  mount -o ro,remount / | tee -a ${PATCH_LOG_FILE} 1>&2

  exit 0
}

get_bck_file() {
  bck_file=`dirname ${file}`"/."`basename ${file}`".orig"

  if [ ! -f ${bck_file} ]; then
    bck_file="${file}.webosinternals.orig"
  fi
}

get_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  appid=`basename ${APP_DIR}`

  if [ -f /var/webosinternals.cache ]; then
    md5sums_line=`grep "^${file} " /var/webosinternals.cache`

    palm_md5sum=`echo ${md5sums_line} | awk '{print $2}'`

    pkg_package=`echo ${md5sums_line} | awk '{print $3}'`

    pkg_version=`echo ${md5sums_line} | awk '{print $4}'`
  fi
}

find_palm_md5sum() {
  palm_md5sum=""
  pkg_package=""
  pkg_version=""

  md5sums_line=""

  echo "Finding md5sum for original file" >> ${PATCH_LOG_FILE}
  echo "  file: ${file}" >> ${PATCH_LOG_FILE}

  check_packages_file

  if [ ! -z "${md5sums_line}" ]; then
    palm_md5sum=`echo ${md5sums_line} | awk '{print $1}'`

    echo "Found md5sum via the packages file" >> ${PATCH_LOG_FILE}
    echo "  md5sum: ${palm_md5sum}" >> ${PATCH_LOG_FILE}

    echo "${file} ${palm_md5sum} ${pkg_package} ${pkg_version}" >>/var/webosinternals.cache
  else
    echo "File not found via packages file, checking cryptofs lists" >> ${PATCH_LOG_FILE}

    check_cryptofs_lists

    if [ ! -z "${md5sums_line}" ]; then
      palm_md5sum=`echo ${md5sums_line} | awk '{print $1}'`

      echo "Found md5sum from the cryptofs lists" >> ${PATCH_LOG_FILE}
      echo "  md5sum: ${palm_md5sum}" >> ${PATCH_LOG_FILE}

      echo "${file} ${palm_md5sum} ${pkg_package} ${pkg_version}" >>/var/webosinternals.cache
    else
      echo "File not found in cryptofs lists, checking system md5sum files" >> ${PATCH_LOG_FILE}

      md5sums_line=`grep "*.${file}$" ${IPKG_INFO_DIR}/*.md5sums`

      if [ ! -z "${md5sums_line}" ]; then
        pkg_package=`echo ${md5sums_line} | cut -d ':' -f 1`

        palm_md5sum=`echo ${md5sums_line} | cut -d ':' -f 2 | awk '{print $1}'`

        echo "Found md5sum from md5sums files" >> ${PATCH_LOG_FILE}
        echo "  md5sum: ${palm_md5sum}" >> ${PATCH_LOG_FILE}

        echo "${file} ${palm_md5sum} ${pkg_package} ${pkg_version}" >>/var/webosinternals.cache
      fi
    fi
  fi
}

check_packages_file() {
  if [ -f ${APP_DIR}/${PACKAGES_FILE} ]; then
    for p in `cat ${APP_DIR}/${PACKAGES_FILE}` ; do
      md5sums_line=`grep "*.${file}$" ${IPKG_INFO_DIR}/${p}.md5sums`

      if [ ! -z "${md5sums_line}" ]; then
        pkg_package="${p}"

        break;
      fi
    done
  fi
}

check_cryptofs_lists() {
  file_line=`grep "^${file#${IPKG_OFFLINE_ROOT}}$" ${IPKG_OFFLINE_ROOT}/${IPKG_INFO_DIR}/*.list`

  if [ ! -z "${file_line}" ]; then
    get_bck_file

    list_file=`echo "${file_line}" | cut -d ':' -f 1`

    pkg_package=`basename ${list_file} .list`

    control_file=`dirname ${list_file}`/${pkg_package}.control

    pkg_version=`grep "^Version: " ${control_file} | awk '{print $2}'`

    control_line=`grep "^${pkg_package} ${file} " ${PATCH_CONTROL_DIR}/file_control`

    tmp_version=`echo ${control_line} | awk '{print $3}'`

    if [ ! -f ${bck_file} ] || [ "${pkg_version}" != "${tmp_version}" ]; then
      md5sums_line=`md5sum ${file} | awk '{print $1}'`" *.${file}"
    else
      md5sums_line=`md5sum ${bck_file} | awk '{print $1}'`" *.${file}"
    fi
  fi
}

verify_text_patch() {
  if [ -f ${APP_DIR}/${PATCH_NAME} ]; then
    echo >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo "Checking patch files" >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo >> ${PATCH_LOG_FILE}

    FILE_LIST=" "`${LSDIFF_EXEC} ${APP_DIR}/${PATCH_NAME}`

    for file in ${FILE_LIST} ; do
      if [ -f ${file} ]; then
        find_palm_md5sum

        if [ -z "${palm_md5sum}" ]; then
          echo  | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "ERROR: Failed to find md5sum for the file" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "  file: ${file}" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo  | tee -a ${PATCH_LOG_FILE} 1>&2

          do_install_failure
        fi
      fi
    done

    echo >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo "Dry running patch" >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo >> ${PATCH_LOG_FILE}

    ${PATCH_EXEC} -f -p 1 -d / --dry-run < ${APP_DIR}/${PATCH_NAME} 2>&1 >> ${PATCH_LOG_FILE}

    if [ ${?} -ne 0 ]; then
      echo >> ${PATCH_LOG_FILE}
      echo "----------------------------------" >> ${PATCH_LOG_FILE}
      echo "Dry run failed, trying with -R" >> ${PATCH_LOG_FILE}
      echo "----------------------------------" >> ${PATCH_LOG_FILE}
      echo >> ${PATCH_LOG_FILE}

      ${PATCH_EXEC} -f -R -p 1 -d / --dry-run < ${APP_DIR}/${PATCH_NAME} 2>&1 >> ${PATCH_LOG_FILE}

      if [ ${?} -ne 0 ]; then
        do_install_failure
      else
        echo | tee -a ${PATCH_LOG_FILE}
        echo "Interestingly, the patch seems to be already applied" | tee -a ${PATCH_LOG_FILE}
        echo | tee -a ${PATCH_LOG_FILE}

        patch_already_applied="yes"
      fi
    fi
  fi
}

verify_binary_patch() {
  if [ -f ${APP_DIR}/${BSPATCH_NAME} ]; then
    echo >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo "Checking binary patch" >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo >> ${PATCH_LOG_FILE}

    file=${BSPATCH_FILE}

    if [ -f ${file} ]; then
      find_palm_md5sum

      file_md5sum=`md5sum ${file} | awk '{print $1}'`

      if [ -z "${palm_md5sum}" ]; then
        echo  | tee -a ${PATCH_LOG_FILE} 1>&2
        echo "ERROR: Failed to find md5sum for the file" | tee -a ${PATCH_LOG_FILE} 1>&2
        echo "  file: ${file}" | tee -a ${PATCH_LOG_FILE} 1>&2
        echo  | tee -a ${PATCH_LOG_FILE} 1>&2

        do_install_failure
      fi

      if [ "${file_md5sum}" = "${palm_md5sum}" ]; then
        FILE_LIST="${FILE_LIST} ${file}"
      else
        get_bck_file

        if [ -f ${bck_file} ]; then
          rm -f /var/webosinternals-*

          cp ${bck_file} /var/webosinternals-orig

          ${BSPATCH_EXEC} /var/webosinternals-orig /var/webosinternals-patched ${APP_DIR}/${BSPATCH_NAME} 2>&1

          tmp_md5sum=`md5sum /var/webosinternals-patched | awk '{print $1}'`

          rm -f /var/webosinternals-*
        fi

        if [ "${file_md5sum}" = "${tmp_md5sum}" ]; then
          echo | tee -a ${PATCH_LOG_FILE}
          echo "Interestingly, the binary file is already patched" | tee -a ${PATCH_LOG_FILE}
          echo | tee -a ${PATCH_LOG_FILE}

          bspatch_already_applied="yes"

          FILE_LIST="${FILE_LIST} ${file}"
        else
          echo  | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "ERROR: File must be stock to be binary patched" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "  file: ${file}" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "  md5sum: ${file_md5sum}" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "  palm_md5sum: ${palm_md5sum}" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo  | tee -a ${PATCH_LOG_FILE} 1>&2

          do_install_failure
        fi
      fi
    else
      echo  | tee -a ${PATCH_LOG_FILE} 1>&2
      echo "ERROR: File to be binary patched does not exist" | tee -a ${PATCH_LOG_FILE} 1>&2
      echo "  file: ${file}" | tee -a ${PATCH_LOG_FILE} 1>&2
      echo  | tee -a ${PATCH_LOG_FILE} 1>&2

      do_install_failure
    fi
  fi
}

verify_additional_files() {
  if [ -d ${APP_DIR}/${FILES_DIR} ]; then
    echo >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo "Checking additional files" >> ${PATCH_LOG_FILE}
    echo "----------------------------------" >> ${PATCH_LOG_FILE}
    echo >> ${PATCH_LOG_FILE}

    for i in `find ${APP_DIR}/${FILES_DIR} -type f` ; do
      file=${i#${APP_DIR}/${FILES_DIR}}

      FILE_LIST="${FILE_LIST} ${file}"

      if [ -f ${file} ]; then
        find_palm_md5sum

        tmp_md5sum=`md5sum ${i} | awk '{print $1}'`

        file_md5sum=`md5sum ${file} | awk '{print $1}'`

        if [ "${file_md5sum}" = "${tmp_md5sum}" ]; then
          echo | tee -a ${PATCH_LOG_FILE}
          echo "Interestingly, the additional file already exists" | tee -a ${PATCH_LOG_FILE}
          echo "  file: ${file}" | tee -a ${PATCH_LOG_FILE}
          echo | tee -a ${PATCH_LOG_FILE}
        elif [ "${FILES_DIR}" != "files" ] || [ "${file_md5sum}" != "${palm_md5sum}" ]; then
          echo  | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "ERROR: Additional file already exists in system" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo "  file: ${file}" | tee -a ${PATCH_LOG_FILE} 1>&2
          echo  | tee -a ${PATCH_LOG_FILE} 1>&2

          do_install_failure
        fi
      fi
    done
  fi
}

install_text_patch() {
  if [ -f ${APP_DIR}/${PATCH_NAME} ]; then
    cp -f ${APP_DIR}/${PATCH_NAME} ${PATCH_CONTROL_DIR}/backup/${PATCH_NAME}

    if [ "${patch_already_applied}" != "yes" ]; then
      echo | tee -a ${PATCH_LOG_FILE}
      echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
      echo "Applying text patch" | tee -a ${PATCH_LOG_FILE}
      echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
      echo | tee -a ${PATCH_LOG_FILE}

      ${PATCH_EXEC} -f -p 1 -d / --no-backup-if-mismatch < ${APP_DIR}/${PATCH_NAME} 2>&1 | tee -a ${PATCH_LOG_FILE}
    fi
  fi
}

install_binary_patch() {
  if [ -f ${APP_DIR}/${BSPATCH_NAME} ]; then
    if [ "${bspatch_already_applied}" != "yes" ]; then
      echo | tee -a ${PATCH_LOG_FILE}
      echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
      echo "Applying binary patch" | tee -a ${PATCH_LOG_FILE}
      echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
      echo | tee -a ${PATCH_LOG_FILE}

      file=${BSPATCH_FILE}

      get_bck_file

      echo "patching file ${file#/}" | tee -a ${PATCH_LOG_FILE}

      rm -f /var/webosinternals-*

      cp ${BSPATCH_FILE} /var/webosinternals-orig

      ${BSPATCH_EXEC} /var/webosinternals-orig /var/webosinternals-patched ${APP_DIR}/${BSPATCH_NAME} 2>&1 | tee -a ${PATCH_LOG_FILE}

      cp -f /var/webosinternals-patched ${BSPATCH_FILE}

      if [ ${?} -ne 0 ]; then
        echo "  failed to patch binary file, file in use" | tee -a ${PATCH_LOG_FILE}
      elif [ -x ${bck_file} ]; then
        chmod 755 ${BSPATCH_FILE}
      fi

      rm -f /var/webosinternals-*
    fi
  fi
}

install_additional_files() {
  if [ -d ${APP_DIR}/${FILES_DIR} ]; then
    echo | tee -a ${PATCH_LOG_FILE}
    echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
    echo "Installing additional files" | tee -a ${PATCH_LOG_FILE}
    echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
    echo | tee -a ${PATCH_LOG_FILE}

    for i in `find ${APP_DIR}/${FILES_DIR} -type f` ; do
      file=${i#${APP_DIR}/${FILES_DIR}}

      echo "installing file ${file#/}" | tee -a ${PATCH_LOG_FILE}

      mkdir -p `dirname ${file}`

      cp -f ${APP_DIR}/${FILES_DIR}/${file} ${file}
    done
  fi
}

install_tweaks_preferences() {
  if [ -f ${APP_DIR}/${TWEAKS_NAME} ]; then
    echo | tee -a ${PATCH_LOG_FILE}
    echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
    echo "Installing tweaks json file" | tee -a ${PATCH_LOG_FILE}
    echo "----------------------------------" | tee -a ${PATCH_LOG_FILE}
    echo | tee -a ${PATCH_LOG_FILE}

    mkdir -p ${TWEAKS_PREFERENCES_DIR} 2>&1 | tee -a ${PATCH_LOG_FILE}

    cp -f ${APP_DIR}/${TWEAKS_NAME} ${TWEAKS_PREFERENCES_DIR}/`basename ${APP_DIR}`.json 2>&1 | tee -a ${PATCH_LOG_FILE}
  fi
}

check_ota_update() {
  echo >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo "Checking md5sums for ota" >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo >> ${PATCH_LOG_FILE}

  for file in ${FILE_LIST} ; do
    get_bck_file

    get_palm_md5sum

    if [ -f ${bck_file} ]; then
      file_md5sum=`md5sum ${file} | awk '{print $1}'`

      if [ "${file_md5sum}" = "${palm_md5sum}" ]; then
        echo "File matches current system md5sum, assuming OTA" >> ${PATCH_LOG_FILE}
        echo "  file: ${file}" >> ${PATCH_LOG_FILE}

        rm -f ${bck_file}
      fi
    fi
  done
}

create_backup_files() {
  echo >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo "Creating backup files" >> ${PATCH_LOG_FILE}
  echo "----------------------------------" >> ${PATCH_LOG_FILE}
  echo >> ${PATCH_LOG_FILE}

  for file in ${FILE_LIST} ; do
    get_bck_file

    get_palm_md5sum

    if [ ! -f ${bck_file} ]; then
      if [ ! -f ${file} ]; then
        echo "Created file, generating empty backup file" >>${PATCH_LOG_FILE}
        echo "  file: ${file}" >> ${PATCH_LOG_FILE}

        mkdir -p `dirname ${file}`

        touch ${bck_file}
      else
        echo "Modified file, backing up the original file" >> ${PATCH_LOG_FILE}
        echo "  file: ${file}" >> ${PATCH_LOG_FILE}

        cp ${file} ${bck_file}
      fi
    fi

    if [ ! -f ${file} ]; then
      file_md5sum=""
    else
      file_md5sum=`md5sum $file | awk '{print $1}'`
    fi

    if [ ! -f ${bck_file} ]; then
      orig_md5sum=""
    else
      orig_md5sum=`md5sum ${bck_file} | awk '{print $1}'`
    fi

    if [ ! -f ${file} ] && [ ! -s ${bck_file} ] || \
      [ "${file_md5sum}" = "${palm_md5sum}" ] || [ "${orig_md5sum}" = "${palm_md5sum}" ]
    then
      tmpvar=`echo "${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${PATCH_CONTROL_DIR}/file_list
      echo "${file} ${VERSION}" >> ${PATCH_CONTROL_DIR}/file_list
    fi

    if [ ! -z "${palm_md5sum}" ]; then
      tmpvar=`echo "${appid} ${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${PATCH_CONTROL_DIR}/file_md5sums
      echo "${appid} ${file} ${palm_md5sum}" >> ${PATCH_CONTROL_DIR}/file_md5sums
    fi

    if [ ! -z "${pkg_version}" ]; then
      tmpvar=`echo "${pkg_package} ${file}" | tr '/' '.'`

      sed -i -e /"^${tmpvar} "/d ${PATCH_CONTROL_DIR}/file_control
      echo "${pkg_package} ${file} ${pkg_version}" >> ${PATCH_CONTROL_DIR}/file_control
    fi
  done

  if [ "${PACKAGES_FILE}" = "package_list" ]; then
    sed -i -e /'^`basename ${APP_DIR}` '/d ${PATCH_PACKAGES_LIST}

    basename "${APP_DIR} ${VERSION}">> ${PATCH_PACKAGES_LIST}
  fi
}

#
# Bunch of safety checks and required initializations
#

if [ ! -f ${PATCH_LOG_FILE} ]; then
  echo "*** Patch Log Created by postinst $(date) ***" > ${PATCH_LOG_FILE}
fi

mount -o rw,remount / | tee -a ${PATCH_LOG_FILE} 1>&2

echo  >> ${PATCH_LOG_FILE}
echo "------------------------------------------------------" >> ${PATCH_LOG_FILE}
echo "PATCH INSTALLATION $(date)" >> ${PATCH_LOG_FILE}
echo "------------------------------------------------------" >> ${PATCH_LOG_FILE}
echo  >> ${PATCH_LOG_FILE}

if [ -f ${APP_DIR}/${PATCH_NAME} ]; then
  echo "Contains text patch: ${PATCH_NAME}" >> ${PATCH_LOG_FILE}
fi

if [ -f ${APP_DIR}/${BSPATCH_NAME} ]; then
  echo "Contains binary patch: ${BSPATCH_NAME}" >> ${PATCH_LOG_FILE}
  echo "  ${BSPATCH_FILE}" >> ${PATCH_LOG_FILE}
fi

if [ -d ${APP_DIR}/${FILES_DIR} ]; then
  echo "Contains additional files" >> ${PATCH_LOG_FILE}
fi

if [ -f ${APP_DIR}/${TWEAKS_NAME} ]; then
  echo "Contains tweaks preferences: ${TWEAKS_NAME}" >> ${PATCH_LOG_FILE}
fi

if [ ! -x ${PATCH_EXEC} ]; then
  echo "ERROR: Cannot find ${PATCH_EXEC}" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -x ${LSDIFF_EXEC} ]; then
  echo "ERROR: Cannot find ${LSDIFF_EXEC}" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -x ${BSPATCH_EXEC} ]; then
  echo "ERROR: Cannot find ${BSPATCH_EXEC}" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_install_failure
fi

if [ -z ${APP_DIR} ]; then
  echo "ERROR: APP_DIR must be set in postinst" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -d ${APP_DIR} ]; then
  echo "ERROR: ${APP_DIR} is not a directory or does not exist!" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_install_failure
fi

if [ ! -f ${APP_DIR}/${PATCH_NAME} ] && [ ! -f ${APP_DIR}/${BSPATCH_NAME} ] && [ ! -d ${APP_DIR}/${FILES_DIR} ]; then
  echo "ERROR: Cannot find patch file, bspatch file or files directory!" | tee -a ${PATCH_LOG_FILE} 1>&2
  do_install_failure
fi

rmdir ${IPKG_OFFLINE_ROOT}/usr/palm/applications/`basename ${APP_DIR}` >/dev/null 2>&1

#
# Intialize and update the patch backup/control system
#

if [ ! -d ${PATCH_CONTROL_DIR}/backup ]; then
  rm -rf ${PATCH_CONTROL_DIR} >/dev/null 2>&1

  mkdir -p ${PATCH_CONTROL_DIR}/backup || do_install_failure
fi

if [ -f ${PATCH_CONTROL_DIR}/backups ]; then
  echo "ERROR: Old backup system detected, not supported by aupt-5!"
  do_install_failure
fi

if [ -f ${PATCH_CONTROL_DIR}/packages ]; then
  echo "ERROR: Old control system detected, not supported by aupt-5!"
  do_install_failure
fi

if [ ! -f ${PATCH_CONTROL_DIR}/file_list ]; then
  touch ${PATCH_CONTROL_DIR}/file_list || do_install_failure
fi

if [ ! -f ${PATCH_CONTROL_DIR}/file_control ]; then
  touch ${PATCH_CONTROL_DIR}/file_control || do_install_failure
fi

if [ ! -f ${PATCH_CONTROL_DIR}/file_md5sums ]; then
  touch ${PATCH_CONTROL_DIR}/file_md5sums || do_install_failure
fi

if [ ! -f ${PATCH_PACKAGES_LIST} ]; then
  touch ${PATCH_PACKAGES_LIST} || do_install_failure
fi

rm -f /var/webosinternals.cache >/dev/null 2>&1

#
# The main function that controls all the magic stuff
#

verify_text_patch

verify_binary_patch

verify_additional_files

check_ota_update

create_backup_files

install_text_patch

install_binary_patch

install_additional_files

install_tweaks_preferences

do_install_success

exit 0

